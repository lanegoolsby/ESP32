#include "tsl2561.h"
#include "freertos/FreeRTOS.h"

static void init_2561() {
	i2c_config_t conf;
	conf.mode = I2C_MODE_MASTER;
	conf.sda_io_num = I2C_MASTER_SDA_IO;
	conf.scl_io_num = I2C_MASTER_SCL_IO;
	conf.sda_pullup_en = GPIO_PULLUP_ENABLE;
	conf.scl_pullup_en = GPIO_PULLUP_ENABLE;
	conf.master.clk_speed = 100000;
	ESP_ERROR_CHECK(i2c_param_config(I2C_NUM_0, &conf));
	ESP_ERROR_CHECK(i2c_driver_install(I2C_NUM_0, I2C_MODE_MASTER, 0, 0, 0));

	ESP_LOGI("mailbox", "I2C Master mode set in readlux()");

	i2c_cmd_handle_t cmd = i2c_cmd_link_create();
	ESP_ERROR_CHECK(i2c_master_start(cmd));
	i2c_master_write_byte(cmd, (0x39 << 1) | I2C_MASTER_WRITE, 1);
	i2c_master_write_byte(cmd, 0x80, 1);
	//ESP_ERROR_CHECK(i2c_master_write_byte(cmd, 0x00, 1));
	i2c_master_write_byte(cmd, 0x03, 1);
	//ESP_ERROR_CHECK(i2c_master_start(cmd));
	//ESP_ERROR_CHECK(i2c_master_write_byte(cmd, (TSL2561_ADDR << 1) | I2C_MASTER_READ, 1));
	//ESP_ERROR_CHECK(i2c_master_write_byte(cmd, 0x00, ACK_CHECK_EN));
	//ESP_ERROR_CHECK(i2c_master_read_byte(cmd,&isOn, 1));
	i2c_master_stop(cmd);
	i2c_master_cmd_begin(I2C_NUM_0, cmd, 1000 / portTICK_RATE_MS);
	i2c_cmd_link_delete(cmd);

}



long calculateLux(uint16_t ch0, uint16_t ch1) {
	unsigned long chScale;
	unsigned long channel1;
	unsigned long channel0;

	chScale = (1 << (10));

	// Scale for gain (1x or 16x)
	//if (!_gain) chScale = chScale << 4;
	chScale = chScale << 4;

	// scale the channel values
	channel0 = (ch0 * chScale) >> TSL2561_LUX_CHSCALE;
	channel1 = (ch1 * chScale) >> TSL2561_LUX_CHSCALE;

	// find the ratio of the channel values (Channel1/Channel0)
	unsigned long ratio1 = 0;
	if (channel0 != 0)
		ratio1 = (channel1 << (TSL2561_LUX_RATIOSCALE + 1)) / channel0;

	// round the ratio value
	long ratio = (ratio1 + 1) >> 1;

	unsigned int b =0, m = 0;

	if ((ratio >= 0) && (ratio <= TSL2561_LUX_K1T)) {
		b = TSL2561_LUX_B1T;
		m = TSL2561_LUX_M1T;
	} else if (ratio <= TSL2561_LUX_K2T) {
		b = TSL2561_LUX_B2T;
		m = TSL2561_LUX_M2T;
	} else if (ratio <= TSL2561_LUX_K3T) {
		b = TSL2561_LUX_B3T;
		m = TSL2561_LUX_M3T;
	} else if (ratio <= TSL2561_LUX_K4T) {
		b = TSL2561_LUX_B4T;
		m = TSL2561_LUX_M4T;
	} else if (ratio <= TSL2561_LUX_K5T) {
		b = TSL2561_LUX_B5T;
		m = TSL2561_LUX_M5T;
	} else if (ratio <= TSL2561_LUX_K6T) {
		b = TSL2561_LUX_B6T;
		m = TSL2561_LUX_M6T;
	} else if (ratio <= TSL2561_LUX_K7T) {
		b = TSL2561_LUX_B7T;
		m = TSL2561_LUX_M7T;
	} else if (ratio > TSL2561_LUX_K8T) {
		b = TSL2561_LUX_B8T;
		m = TSL2561_LUX_M8T;
	}

	long temp;
	temp = ((channel0 * b) - (channel1 * m));

	// do not allow negative lux value
	//if (temp < 0)
	//	temp = 0;

	// round lsb (2^(LUX_SCALE-1))
	temp += (1 << (TSL2561_LUX_LUXSCALE - 1));

	// strip off fractional portion
	long lux = temp >> TSL2561_LUX_LUXSCALE;

	// Signal I2C had no errors
	return lux;
}

void callI2C(i2c_cmd_handle_t *cmd, uint8_t addr, uint8_t *data){
	ESP_ERROR_CHECK(i2c_master_start(*cmd));
	ESP_ERROR_CHECK(i2c_master_write_byte(*cmd, (TSL2561_ADDR << 1) | I2C_MASTER_WRITE, 1));
	i2c_master_write_byte(*cmd, addr, 1);
	i2c_master_stop(cmd);
	i2c_master_cmd_begin(I2C_NUM_0, cmd, 500 / portTICK_RATE_MS);

	cmd = i2c_cmd_link_create();
	ESP_ERROR_CHECK(i2c_master_start(cmd));
	ESP_ERROR_CHECK(i2c_master_write_byte(cmd, (TSL2561_ADDR << 1) | I2C_MASTER_READ, 1));
	i2c_master_read_byte(cmd, data, 1);
	i2c_master_stop(cmd);
	i2c_master_cmd_begin(I2C_NUM_0, cmd, 500 / portTICK_RATE_MS);
}

esp_err_t read_current_lux() {
	uint8_t data1_h = 0;
	uint8_t data2_h = 0;
	uint8_t data1_l = 0;
	uint8_t data2_l = 0;

	i2c_cmd_handle_t cmd = i2c_cmd_link_create();

	callI2C(&cmd, 0x8c, &data1_l);
	/*ESP_ERROR_CHECK(i2c_master_start(cmd));
	ESP_ERROR_CHECK(
			i2c_master_write_byte(cmd, (TSL2561_ADDR << 1) | I2C_MASTER_WRITE,
					1));
	i2c_master_write_byte(cmd, 0x8C, 1);
	i2c_master_stop(cmd);
	i2c_master_cmd_begin(I2C_NUM_0, cmd, 500 / portTICK_RATE_MS);
	//i2c_cmd_link_delete(cmd);

	cmd = i2c_cmd_link_create();
	ESP_ERROR_CHECK(i2c_master_start(cmd));
	ESP_ERROR_CHECK(
			i2c_master_write_byte(cmd, (TSL2561_ADDR << 1) | I2C_MASTER_READ,
					1));
	i2c_master_read_byte(cmd, &data1_l, 1);
	i2c_master_stop(cmd);
	i2c_master_cmd_begin(I2C_NUM_0, cmd, 500 / portTICK_RATE_MS);
	//i2c_cmd_link_delete(cmd);*/

	cmd = i2c_cmd_link_create();
	ESP_ERROR_CHECK(i2c_master_start(cmd));
	ESP_ERROR_CHECK(
			i2c_master_write_byte(cmd, (TSL2561_ADDR << 1) | I2C_MASTER_WRITE,
					1));
	i2c_master_write_byte(cmd, 0x8D, 1);
	i2c_master_stop(cmd);
	i2c_master_cmd_begin(I2C_NUM_0, cmd, 500 / portTICK_RATE_MS);
	//i2c_cmd_link_delete(cmd);

	cmd = i2c_cmd_link_create();
	ESP_ERROR_CHECK(i2c_master_start(cmd));
	ESP_ERROR_CHECK(
			i2c_master_write_byte(cmd, (TSL2561_ADDR << 1) | I2C_MASTER_READ,
					1));
	i2c_master_read_byte(cmd, &data1_h, 1);
	i2c_master_stop(cmd);
	i2c_master_cmd_begin(I2C_NUM_0, cmd, 500 / portTICK_RATE_MS);
	//i2c_cmd_link_delete(cmd);

	cmd = i2c_cmd_link_create();
	ESP_ERROR_CHECK(i2c_master_start(cmd));
	ESP_ERROR_CHECK(
			i2c_master_write_byte(cmd, (TSL2561_ADDR << 1) | I2C_MASTER_WRITE,
					1));
	i2c_master_write_byte(cmd, 0x8E, 1);
	i2c_master_stop(cmd);
	i2c_master_cmd_begin(I2C_NUM_0, cmd, 500 / portTICK_RATE_MS);
	//i2c_cmd_link_delete(cmd);

	cmd = i2c_cmd_link_create();
	ESP_ERROR_CHECK(i2c_master_start(cmd));
	ESP_ERROR_CHECK(
			i2c_master_write_byte(cmd, (TSL2561_ADDR << 1) | I2C_MASTER_READ,
					1));
	i2c_master_read_byte(cmd, &data1_h, 1);
	i2c_master_stop(cmd);
	i2c_master_cmd_begin(I2C_NUM_0, cmd, 500 / portTICK_RATE_MS);
	//i2c_cmd_link_delete(cmd);

	cmd = i2c_cmd_link_create();
	ESP_ERROR_CHECK(i2c_master_start(cmd));
	ESP_ERROR_CHECK(
			i2c_master_write_byte(cmd, (TSL2561_ADDR << 1) | I2C_MASTER_WRITE,
					1));
	i2c_master_write_byte(cmd, 0x8F, 1);
	i2c_master_stop(cmd);
	i2c_master_cmd_begin(I2C_NUM_0, cmd, 500 / portTICK_RATE_MS);
	//i2c_cmd_link_delete(cmd);

	cmd = i2c_cmd_link_create();
	ESP_ERROR_CHECK(i2c_master_start(cmd));
	ESP_ERROR_CHECK(
			i2c_master_write_byte(cmd, (TSL2561_ADDR << 1) | I2C_MASTER_READ,
					1));
	i2c_master_read_byte(cmd, &data1_h, 1);
	i2c_master_stop(cmd);
	i2c_master_cmd_begin(I2C_NUM_0, cmd, 500 / portTICK_RATE_MS);
	i2c_cmd_link_delete(cmd);

	printf("data_1l: %02x\n", data1_l);
	printf("data_1h: %02x\n", data1_h);
	printf("data_2l: %02x\n", data2_l);
	printf("data_2h: %02x\n", data2_h);
	long value = ((data1_l << 8) | data1_h) / 1.2;
	ESP_LOGI("mailbox", "1x value %ld", value);

	uint16_t ch0 = (data1_l << 8) | data1_h;
	uint16_t ch1 = (data2_l << 8) | data2_h;
	long lux = calculateLux(ch0, ch1);
	ESP_LOGI("mailbox", "calculated 1ux value %ld", lux);

	vTaskDelay(500 / portTICK_RATE_MS);

	return ESP_OK;
}
